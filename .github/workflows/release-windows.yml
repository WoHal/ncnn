name: release-windows
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release tag name (default ncnn version)'
        default: ''

permissions:
  contents: read

jobs:

  setup:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - name: get-version
      id: get_version
      run: echo "VERSION=${{ inputs.version }}" >> $GITHUB_OUTPUT

  windows:
    needs: [setup]
    strategy:
      matrix:
        opt:
          - { shared-lib: OFF, os: windows-2019, toolset-version: v140, id: vs2015 }
          - { shared-lib: OFF, os: windows-2019, toolset-version: v141, id: vs2017 }
          - { shared-lib: OFF, os: windows-2019, toolset-version: v142, id: vs2019 }
          - { shared-lib: OFF, os: windows-2022, toolset-version: v143, id: vs2022 }
          - { shared-lib: ON,  os: windows-2019, toolset-version: v140, id: vs2015-shared }
          - { shared-lib: ON,  os: windows-2019, toolset-version: v141, id: vs2017-shared }
          - { shared-lib: ON,  os: windows-2019, toolset-version: v142, id: vs2019-shared }
          - { shared-lib: ON,  os: windows-2022, toolset-version: v143, id: vs2022-shared }
    runs-on: ${{ matrix.opt.os }}
    env:
      PACKAGENAME: ncnn-${{ needs.setup.outputs.VERSION }}-windows-${{ matrix.opt.id }}
      UseMultiToolTask: true
      NCNN_CMAKE_OPTIONS: |
        -T ${{ matrix.opt.toolset-version }},host=x64 `
        -DCMAKE_BUILD_TYPE=Release `
        -DCMAKE_INSTALL_PREFIX=install `
        -DNCNN_VERSION_STRING="${{ needs.setup.outputs.VERSION }}" `
        -DNCNN_BUILD_EXAMPLES=OFF `
        -DNCNN_BUILD_TOOLS=ON `
        -DNCNN_BUILD_BENCHMARK=OFF `
        -DNCNN_VULKAN=ON `
        -DNCNN_SHARED_LIB=${{ matrix.opt.shared-lib }} `

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: cache-protobuf
      id: cache-protobuf
      uses: actions/cache@v4
      with:
        path: "protobuf-install"
        key: protobuf-${{ matrix.opt.toolset-version }}-x86-x64-install
    - name: protobuf
      if: steps.cache-protobuf.outputs.cache-hit != 'true'
      run: |
        Invoke-WebRequest -Uri https://github.com/protocolbuffers/protobuf/archive/v3.11.2.zip -OutFile protobuf-3.11.2.zip
        7z x ./protobuf-3.11.2.zip
        cd protobuf-3.11.2
        mkdir build-x86; cd build-x86;
        cmake -T ${{ matrix.opt.toolset-version }},host=x64 -A Win32 -DCMAKE_INSTALL_PREFIX="$env:GITHUB_WORKSPACE\protobuf-install\x86" -Dprotobuf_BUILD_TESTS=OFF -Dprotobuf_MSVC_STATIC_RUNTIME=OFF ../cmake
        cmake --build . --config Release -j 4
        cmake --build . --config Release --target install
        cd ..
        mkdir build-x64; cd build-x64;
        cmake -T ${{ matrix.opt.toolset-version }},host=x64 -A x64 -DCMAKE_INSTALL_PREFIX="$env:GITHUB_WORKSPACE\protobuf-install\x64" -Dprotobuf_BUILD_TESTS=OFF -Dprotobuf_MSVC_STATIC_RUNTIME=OFF ../cmake
        cmake --build . --config Release -j 4
        cmake --build . --config Release --target install
    - name: build-x86
      run: |
        mkdir build-x86; cd build-x86
        cmake ${{ env.NCNN_CMAKE_OPTIONS }} -A Win32 -Dprotobuf_DIR="$env:GITHUB_WORKSPACE\protobuf-install\x86\cmake" ..
        cmake --build . --config Release -j 4
        cmake --build . --config Release --target install
    - name: build-x64
      run: |
        mkdir build-x64; cd build-x64
        cmake ${{ env.NCNN_CMAKE_OPTIONS }} -A x64 -Dprotobuf_DIR="$env:GITHUB_WORKSPACE\protobuf-install\x64\cmake" ..
        cmake --build . --config Release -j 4
        cmake --build . --config Release --target install
    - name: build-arm64
      if: matrix.opt.toolset-version == 'v142' || matrix.opt.toolset-version == 'v143'
      run: |
        mkdir build-arm64; cd build-arm64
        cmake ${{ env.NCNN_CMAKE_OPTIONS }} -A arm64 ..
        cmake --build . --config Release -j 4
        cmake --build . --config Release --target install
    - name: package
      if: matrix.opt.toolset-version == 'v140' || matrix.opt.toolset-version == 'v141'
      run: |
        mkdir ${{ env.PACKAGENAME }}
        mkdir ${{ env.PACKAGENAME }}/x86
        mkdir ${{ env.PACKAGENAME }}/x64
        Copy-Item -Verbose -Recurse -Path "build-x86\install\*" -Destination "${{ env.PACKAGENAME }}\x86"
        Copy-Item -Verbose -Recurse -Path "build-x64\install\*" -Destination "${{ env.PACKAGENAME }}\x64"
        7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: package
      if: matrix.opt.toolset-version == 'v142' || matrix.opt.toolset-version == 'v143'
      run: |
        mkdir ${{ env.PACKAGENAME }}
        mkdir ${{ env.PACKAGENAME }}/x86
        mkdir ${{ env.PACKAGENAME }}/x64
        mkdir ${{ env.PACKAGENAME }}/arm64
        Copy-Item -Verbose -Recurse -Path "build-x86\install\*" -Destination "${{ env.PACKAGENAME }}\x86"
        Copy-Item -Verbose -Recurse -Path "build-x64\install\*" -Destination "${{ env.PACKAGENAME }}\x64"
        Copy-Item -Verbose -Recurse -Path "build-arm64\install\*" -Destination "${{ env.PACKAGENAME }}\arm64"
        7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload-zip
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  release:
    permissions:
      contents: write  # for softprops/action-gh-release to create a release
      # needs: [setup, full-source, ubuntu, macos, ios, ios-simulator, mac-catalyst, watchos, watchos-simulator, tvos, tvos-simulator, android, webassembly, windows, apple]
    needs: [setup, windows]
    runs-on: ubuntu-latest
    steps:
    - name: download
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: create-release
      uses: softprops/action-gh-release@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: ${{ needs.setup.outputs.VERSION }}
        name: Release ${{ needs.setup.outputs.VERSION }}
        files: artifacts/*/*.zip

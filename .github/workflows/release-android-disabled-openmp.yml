name: release-android-disabled-openmp
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release tag name (default ncnn version)'
        default: ''

permissions:
  contents: read

jobs:

  setup:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - name: get-version
      id: get_version
      run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

  full-source:
    needs: [setup]
    runs-on: ubuntu-latest
    env:
      PACKAGENAME: ncnn-${{ needs.setup.outputs.VERSION }}-full-source
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: package
      run: |
        rm -rf .git
        rm -f /tmp/${{ env.PACKAGENAME }}.zip
        zip -9 -y -r /tmp/${{ env.PACKAGENAME }}.zip .
    - name: upload-zip
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGENAME }}
        path: /tmp/${{ env.PACKAGENAME }}.zip

  android:
    needs: [setup]
    strategy:
      matrix:
        opt:
          # - { vulkan: OFF, shared-lib: OFF, id: android               }
          # - { vulkan: OFF, shared-lib: ON,  id: android-shared        }
          - { vulkan: ON,  shared-lib: OFF, id: android-vulkan        }
          - { vulkan: ON,  shared-lib: ON,  id: android-vulkan-shared }
    runs-on: ubuntu-latest
    env:
      PACKAGENAME: ncnn-${{ needs.setup.outputs.VERSION }}-${{ matrix.opt.id }}
      NCNN_CMAKE_OPTIONS: |
        -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_LATEST_HOME/build/cmake/android.toolchain.cmake \
        -DANDROID_PLATFORM=android-21 \
        -DANDROID_USE_LEGACY_TOOLCHAIN_FILE=False \
        -DANDROID_SUPPORT_FLEXIBLE_PAGE_SIZES=ON \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=install \
        -DNCNN_VERSION_STRING="${{ needs.setup.outputs.VERSION }}" \
        -DNCNN_BUILD_BENCHMARK=OFF \
        -DNCNN_VULKAN=${{ matrix.opt.vulkan }} \
        -DNCNN_OPENMP=OFF \
        -DNCNN_DISABLE_RTTI=ON -DNCNN_DISABLE_EXCEPTION=ON -DNCNN_STDIO=OFF -DNCNN_PIXEL_DRAWING=OFF \
        -DNCNN_PIXEL_ROTATE=OFF -DNCNN_PIXEL_AFFINE=OFF -DNCNN_AVX2=OFF -DNCNN_ARM82=OFF -DNCNN_RUNTIME_CPU=OFF \
        -DNCNN_SIMPLESTL=ON \
        -DNCNN_SHARED_LIB=${{ matrix.opt.shared-lib }} \

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: ndk-fix-debug
      run: sed -i -e '/^  -g$/d' $ANDROID_NDK_LATEST_HOME/build/cmake/android-legacy.toolchain.cmake
    - name: build-armeabi-v7a
      run: |
        mkdir build-armeabi-v7a && cd build-armeabi-v7a
        cmake ${{ env.NCNN_CMAKE_OPTIONS }} -DANDROID_ABI="armeabi-v7a" -DANDROID_ARM_NEON=ON ..
        cmake --build . -j $(nproc)
        cmake --build . --target install/strip
    - name: build-arm64-v8a
      run: |
        mkdir build-arm64-v8a && cd build-arm64-v8a
        cmake ${{ env.NCNN_CMAKE_OPTIONS }}-DANDROID_ABI="arm64-v8a" ..
        cmake --build . -j $(nproc)
        cmake --build . --target install/strip
    - name: build-x86
      run: |
        mkdir build-x86 && cd build-x86
        cmake ${{ env.NCNN_CMAKE_OPTIONS }}-DANDROID_ABI="x86" ..
        cmake --build . -j $(nproc)
        cmake --build . --target install/strip
    - name: build-x86_64
      run: |
        mkdir build-x86_64 && cd build-x86_64
        cmake ${{ env.NCNN_CMAKE_OPTIONS }}-DANDROID_ABI="x86_64" ..
        cmake --build . -j $(nproc)
        cmake --build . --target install/strip
    - name: build-riscv64
      run: |
        mkdir build-riscv64 && cd build-riscv64
        cmake ${{ env.NCNN_CMAKE_OPTIONS }}-DANDROID_ABI="riscv64" ..
        cmake --build . -j $(nproc)
        cmake --build . --target install/strip
    - name: package
      run: |
        rm -rf ${{ env.PACKAGENAME }}
        mkdir -p ${{ env.PACKAGENAME }}
        cp -a build-armeabi-v7a/install ${{ env.PACKAGENAME }}/armeabi-v7a
        cp -a build-arm64-v8a/install ${{ env.PACKAGENAME }}/arm64-v8a
        cp -a build-x86/install ${{ env.PACKAGENAME }}/x86
        cp -a build-x86_64/install ${{ env.PACKAGENAME }}/x86_64
        cp -a build-riscv64/install ${{ env.PACKAGENAME }}/riscv64
        rm -f ${{ env.PACKAGENAME }}.zip
        zip -9 -y -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload-zip
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  release:
    permissions:
      contents: write  # for softprops/action-gh-release to create a release
      # needs: [setup, full-source, ubuntu, macos, ios, ios-simulator, mac-catalyst, watchos, watchos-simulator, tvos, tvos-simulator, android, webassembly, windows, apple]
    needs: [setup, full-source, android, webassembly]
    runs-on: ubuntu-latest
    steps:
    - name: download
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: create-release
      uses: softprops/action-gh-release@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: ${{ needs.setup.outputs.VERSION }}
        name: Release ${{ needs.setup.outputs.VERSION }}
        files: artifacts/*/*.zip
